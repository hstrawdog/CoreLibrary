plugins {
    alias(libs.plugins.androidLibrary)
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'maven-publish'
}
import com.easy.core.plugin.*


android {
    buildFeatures {
        //开启 viewBinding 支持
        viewBinding true
        //开启 dataBinding 支持
        dataBinding true
        //开启 Compose 支持
//        compose true
    }
    compileSdk BuildVersionConfig.compileSdkVersion
//    buildToolsVersion BuildVersionConfig.buildToolsVersion
    defaultConfig {
        minSdkVersion BuildVersionConfig.minSdkVersion
        targetSdkVersion BuildVersionConfig.targetSdkVersion
        versionName "1.0"
        versionCode 1

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    lint {
        baseline = file("lint-baseline.xml")
    }

}

dependencies {
    //版本要与gradle版本一致
//    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.21"
    api project(':DimensCompat')

    // Appcompat   包含 core
    api Appcompat.appcompat
    api Appcompat.coreKtx

    //  kotlin拓展包
    api KTX.activityKtx
    api KTX.fragmentKtx

    //  androidX 组件
    api Components.constraintLayout
    api Components.recyclerview
    api Components.viewpager2
    api Components.meteria

    // 生命周期
    api Lifecycle.lifecycleViewModelKtx
    api Lifecycle.lifecycleLivedataKtx
    api Lifecycle.lifecycleRunTimeKtx

    // 屏幕适配
//    api DimensCompat.iDimensCompat

    // gson解析
    api Gson.gson

    // 压缩
    api Luban.luban

    // 上拉加载
    api BaseRecyclerViewAdapterHelper.baseRecyclerViewAdapterHelper

    // 下拉刷新
    api UltraPtr.ultraPtr

    // 图片加载
    api Glide.glide
    kapt Glide.glideCompiler

    api CoilKt.coilKt


    // retrofit 请求
    api Retrofit.retrofit
    api Retrofit.converterGson
    api Retrofit.loggingInterceptor

}



afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            group = 'com.github.hstrawdog'
            version = '1.3.0'
            //发布release版本
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release
                //groupId通常是自己的gitee或者GitHub的账户地址
                groupId = group
                //artifactId通常是指待发布项目的名称，也就是别名
                artifactId = 'Core'
                //version通常是指待发布项目的版本号，这里是写死的，通常我们取项目versionName
                version = version
            }
        }
    }
}